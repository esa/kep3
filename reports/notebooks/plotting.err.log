Traceback (most recent call last):
  File "/home/runner/local/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/runner/local/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/home/runner/local/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/home/runner/local/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/home/runner/local/lib/python3.13/asyncio/base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/home/runner/local/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/home/runner/local/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/local/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Making the axis
ax = pk.plot.make_3Daxis(figsize = (5,5))

# Adding the various planets / Sun
pk.plot.add_sun(ax, s=40)

pk.plot.add_planet(ax, earth, when=t0, label = earth.get_name(), c = 'royalblue', s=10)
pk.plot.add_planet_orbit(ax, earth, c = 'royalblue')

pk.plot.add_planet(ax, mars, when=t0 + tof_days, label = mars.get_name(), c = 'indianred', s=3)
pk.plot.add_planet_orbit(ax, mars, c = 'indianred')

# Here we add the Lambert arc
pk.plot.add_lambert(ax, lp, N=60, sol=0, c='k', alpha=0.5)

# Some cosmetics to customize the plot
ax.legend()
ax.axis('off')
ax.set_xlim3d(-1.2,1.2)
ax.set_ylim3d(-1.2,1.2)
ax.view_init(90,0)
ax.set_title("A Lambert arc to get to Mars");

------------------


[31m---------------------------------------------------------------------------[39m
[31mAttributeError[39m                            Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[6][39m[32m, line 14[39m
[32m     11[39m pk.plot.add_planet_orbit(ax, mars, c = [33m'[39m[33mindianred[39m[33m'[39m)
[32m     13[39m [38;5;66;03m# Here we add the Lambert arc[39;00m
[32m---> [39m[32m14[39m [43mpk[49m[43m.[49m[43mplot[49m[43m.[49m[43madd_lambert[49m[43m([49m[43max[49m[43m,[49m[43m [49m[43mlp[49m[43m,[49m[43m [49m[43mN[49m[43m=[49m[32;43m60[39;49m[43m,[49m[43m [49m[43msol[49m[43m=[49m[32;43m0[39;49m[43m,[49m[43m [49m[43mc[49m[43m=[49m[33;43m'[39;49m[33;43mk[39;49m[33;43m'[39;49m[43m,[49m[43m [49m[43malpha[49m[43m=[49m[32;43m0.5[39;49m[43m)[49m
[32m     16[39m [38;5;66;03m# Some cosmetics to customize the plot[39;00m
[32m     17[39m ax.legend()

[36mFile [39m[32m~/local/lib/python3.13/site-packages/pykep/plot/_lambert.py:58[39m, in [36madd_lambert[39m[34m(ax, lp, N, sol, units, **kwargs)[39m
[32m     55[39m theta = _np.arccos(_np.clip(cos_theta, -[32m1.0[39m, [32m1.0[39m))
[32m     57[39m [38;5;66;03m# Assuming motion is in the xy-plane (i.e., third component z gives the direction)[39;00m
[32m---> [39m[32m58[39m [38;5;28;01mif[39;00m [43mlp[49m[43m.[49m[43mcw[49m:  [38;5;66;03m# The motion is clockwise[39;00m
[32m     59[39m     theta = [32m2[39m * _np.pi - theta  [38;5;66;03m# Adjust the angle to account for counterclockwise motion[39;00m
[32m     61[39m [38;5;66;03m# We define the integration grid[39;00m

[31mAttributeError[39m: 'pykep.core.lambert_problem' object has no attribute 'cw'

